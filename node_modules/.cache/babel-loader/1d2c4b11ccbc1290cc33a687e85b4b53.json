{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nms\\\\Desktop\\\\fish\\\\openoms\\\\src\\\\components\\\\PriceList.js\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport SecureLS from 'secure-ls';\nimport { connect } from \"react-redux\";\nimport { DataGrid } from '@material-ui/data-grid';\nimport { Card, CardImg, CardBody, CardTitle, Container, Row, Button, Col, Label, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport { products, addtocart, category, addArticle, user, selectProduct } from \"../js/actions/index\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ls = new SecureLS({\n  encodingType: 'aes'\n});\nconst token = ls.get('token');\n\nclass Cart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.props.product.map(product => {\n      var Taste_Class = '';\n\n      if (product.filter.Taste_Class == 1) {\n        Taste_Class = 'Lesser';\n      } else if (product.filter.Taste_Class == 2) {\n        Taste_Class = 'Normal';\n      } else if (product.filter.Taste_Class == 3) {\n        Taste_Class = 'Good';\n      } else if (product.filter.Taste_Class == 4) {\n        Taste_Class = 'Best';\n      } else {\n        Taste_Class = 'Normal';\n      }\n\n      var Thorns = '';\n\n      if (product.filter.Thorns == 1) {\n        Thorns = 'Many';\n      } else if (product.filter.Thorns == 2) {\n        Thorns = 'Few';\n      } else if (product.filter.Thorns == 3) {\n        Thorns = 'One';\n      } else if (product.filter.Thorns == 0) {\n        Thorns = 'None';\n      } else {\n        Thorns = 'Normal';\n      }\n\n      var Meat_Whiteness = '';\n\n      if (product.filter.Meat_Whiteness == 1) {\n        Meat_Whiteness = 'Very Light';\n      } else if (product.filter.Meat_Whiteness == 2) {\n        Meat_Whiteness = 'Light';\n      } else if (product.filter.Meat_Whiteness == 3) {\n        Meat_Whiteness = 'Dark';\n      } else {\n        Meat_Whiteness = 'Normal';\n      }\n\n      var Size = '';\n\n      if (product.filter.Size == 1) {\n        Size = 'tiny';\n      } else if (product.filter.Size == 2) {\n        Size = 'small';\n      } else if (product.filter.Size == 3) {\n        Size = 'medium';\n      } else if (product.filter.Size == 4) {\n        Size = 'large';\n      } else if (product.filter.Size == 5) {\n        Size = 'extra large';\n      } else {\n        Size = 'medium';\n      }\n\n      var Salt_Water = '';\n\n      if (product.filter.Salt_Water == 1) {\n        Salt_Water = 'Salt';\n      } else {\n        Salt_Water = 'Fresh';\n      }\n\n      var bestfor = '';\n\n      if (product.filter.Whole_Fry == 1) {\n        bestfor = 'Whole Fry';\n      } else if (product.filter.Piece_Fry == 1) {\n        bestfor = 'Piece Fry';\n      } else if (product.filter.Fillets == 1) {\n        bestfor = 'Fillets';\n      } else if (product.filter.Whole_Fry == 1) {\n        bestfor = 'Whole Fry';\n      } else if (product.filter.Grill == 1) {\n        bestfor = 'Grill';\n      } else if (product.filter.Salan == 1) {\n        bestfor = 'Salan';\n      } else if (product.filter.Biryani == 1) {\n        bestfor = 'Biryani';\n      } else if (product.filter.Soup == 1) {\n        bestfor = 'Soup';\n      } else {\n        bestfor = 'none';\n      }\n\n      this.state.data.push({\n        id: product.product.id,\n        Taste_Class: Taste_Class,\n        Product: product.product.name,\n        Thorns: Thorns,\n        Meat_Whiteness: Meat_Whiteness,\n        Net_Wt_Fillets_Min: product.filter.Net_Wt_Fillets_Min,\n        Net_Wt_Steaks_Min: product.filter.Net_Wt_Fillets_Min,\n        Price: product.average.total_retail_price,\n        Local_Grouping: product.filter.Local_Grouping,\n        Foreign_Names: product.filter.Foreign_Names,\n        Foreign_Grouping: product.filter.Foreign_Grouping,\n        Salt_Water: Salt_Water,\n        Urdu: product.filter.Urdu,\n        Size: Size,\n        bestfor: bestfor\n      });\n    });\n  }\n\n  render() {\n    const columns = [{\n      field: 'Foreign_Names',\n      headerName: 'Fish Name(foreign)',\n      width: 200,\n      hide: true\n    }, {\n      field: 'Foreign_Grouping',\n      headerName: 'Group',\n      width: 100,\n      hide: true\n    }, {\n      field: 'Product',\n      headerName: 'Fish Name(local)',\n      width: 200,\n      type: 'string'\n    }, {\n      field: 'Urdu',\n      headerName: 'Urdu',\n      width: 100\n    }, {\n      field: 'Local_Grouping',\n      headerName: 'Group',\n      width: 100,\n      type: 'string'\n    }, {\n      field: 'Taste_Class',\n      headerName: 'Taste',\n      width: 90\n    }, {\n      field: 'Thorns',\n      headerName: 'Thorns',\n      width: 100\n    }, {\n      field: 'Meat_Whiteness',\n      headerName: 'Meat Color',\n      width: 100\n    }, {\n      field: 'Net_Wt_Fillets_Min',\n      headerName: 'Fillets(Net Wt/kg)',\n      width: 105\n    }, {\n      field: 'Net_Wt_Steaks_Min',\n      headerName: 'Steaks(Net Wt/kg)',\n      width: 110\n    }, {\n      field: 'Price',\n      width: 100\n    }, {\n      field: 'Meat_Whiteness',\n      headerName: 'Color(meat)',\n      width: 105\n    }, {\n      field: 'Salt_Water',\n      headerName: 'Water',\n      width: 90\n    }, {\n      field: 'Size',\n      headerName: 'Size',\n      width: 90\n    }, {\n      field: 'bestfor',\n      headerName: 'Best For',\n      width: 120\n    }];\n    const rows = this.state.data;\n    return /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            height: 800\n          },\n          children: /*#__PURE__*/_jsxDEV(DataGrid, {\n            rows: rows,\n            columns: columns,\n            rowHeight: 25\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 18\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    product: state.product\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Cart);","map":{"version":3,"sources":["C:/Users/nms/Desktop/fish/openoms/src/components/PriceList.js"],"names":["React","Link","SecureLS","connect","DataGrid","Card","CardImg","CardBody","CardTitle","Container","Row","Button","Col","Label","Modal","ModalHeader","ModalBody","ModalFooter","products","addtocart","category","addArticle","user","selectProduct","ls","encodingType","token","get","Cart","Component","constructor","props","state","data","componentDidMount","product","map","Taste_Class","filter","Thorns","Meat_Whiteness","Size","Salt_Water","bestfor","Whole_Fry","Piece_Fry","Fillets","Grill","Salan","Biryani","Soup","push","id","Product","name","Net_Wt_Fillets_Min","Net_Wt_Steaks_Min","Price","average","total_retail_price","Local_Grouping","Foreign_Names","Foreign_Grouping","Urdu","render","columns","field","headerName","width","hide","type","rows","height","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n  import { Link } from \"react-router-dom\";\r\n  import SecureLS from 'secure-ls';\r\n  import { connect } from \"react-redux\";\r\n  import { DataGrid } from '@material-ui/data-grid';\r\n  import { Card, CardImg, CardBody,\r\n    CardTitle, Container,Row,Button,Col,Label, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\n  import { products, addtocart, category,addArticle,user ,selectProduct} from \"../js/actions/index\";\r\n  var ls = new SecureLS({encodingType: 'aes'});\r\n  const token=ls.get('token')\r\n class Cart extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n                    data:[]\r\n                    };\r\n    }\r\n    \r\n    componentDidMount(){\r\n   this.props.product.map((product)=>{\r\n     var Taste_Class='';\r\n     if(product.filter.Taste_Class==1){Taste_Class='Lesser'}\r\n     else if(product.filter.Taste_Class==2){Taste_Class='Normal'}\r\n     else if(product.filter.Taste_Class==3){Taste_Class='Good'}\r\n     else if(product.filter.Taste_Class==4){Taste_Class='Best'}\r\n     else{Taste_Class='Normal'}\r\n     var Thorns='';\r\n     if(product.filter.Thorns==1){Thorns='Many'}\r\n     else if(product.filter.Thorns==2){Thorns='Few'}\r\n     else if(product.filter.Thorns==3){Thorns='One'}\r\n     else if(product.filter.Thorns==0){Thorns='None'}\r\n     else{Thorns='Normal'}\r\n     var Meat_Whiteness='';\r\n     if(product.filter.Meat_Whiteness==1){Meat_Whiteness='Very Light'}\r\n     else if(product.filter.Meat_Whiteness==2){Meat_Whiteness='Light'}\r\n     else if(product.filter.Meat_Whiteness==3){Meat_Whiteness='Dark'}\r\n     else{Meat_Whiteness='Normal'}\r\n     var Size='';\r\n     if(product.filter.Size==1){Size='tiny'}\r\n     else if(product.filter.Size==2){Size='small'}\r\n     else if(product.filter.Size==3){Size='medium'}\r\n     else if(product.filter.Size==4){Size='large'}\r\n     else if(product.filter.Size==5){Size='extra large'}\r\n     else{Size='medium'}\r\n     var Salt_Water='';\r\n     if(product.filter.Salt_Water==1){Salt_Water='Salt'}else{Salt_Water='Fresh'}\r\n    var bestfor='';\r\n     if(product.filter.Whole_Fry==1){bestfor='Whole Fry'}\r\n     else if(product.filter.Piece_Fry==1){bestfor='Piece Fry'}\r\n     else if(product.filter.Fillets==1){bestfor='Fillets'}\r\n     else if(product.filter.Whole_Fry==1){bestfor='Whole Fry'}\r\n     else if(product.filter.Grill==1){bestfor='Grill'}\r\n     else if(product.filter.Salan==1){bestfor='Salan'}\r\n     else if(product.filter.Biryani==1){bestfor='Biryani'}\r\n     else if(product.filter.Soup==1){bestfor='Soup'}\r\n    else{bestfor='none'}\r\n            this.state.data.push({id:                  product.product.id,\r\n                                  Taste_Class:         Taste_Class,\r\n                                    Product:           product.product.name,\r\n                                    Thorns:             Thorns,\r\n                                    Meat_Whiteness:     Meat_Whiteness,\r\n                                    Net_Wt_Fillets_Min:  product.filter.Net_Wt_Fillets_Min,\r\n                                    Net_Wt_Steaks_Min:   product.filter.Net_Wt_Fillets_Min,\r\n                                  Price:                 product.average.total_retail_price,\r\n                                  Local_Grouping:      product.filter.Local_Grouping,\r\n                                  Foreign_Names:       product.filter.Foreign_Names,\r\n                                  Foreign_Grouping:    product.filter.Foreign_Grouping,\r\n                                  Salt_Water:         Salt_Water,\r\n                                  Urdu:                 product.filter.Urdu,\r\n                                  Size:              Size,\r\n                                bestfor:bestfor})\r\n   })\r\n    }\r\n\r\n    render() {\r\n      const columns = [\r\n        { field: 'Foreign_Names' ,headerName:'Fish Name(foreign)', width: 200,hide: true},\r\n        { field: 'Foreign_Grouping',headerName:'Group', width: 100  ,hide: true},\r\n       \r\n        { field: 'Product',headerName:'Fish Name(local)', width: 200 ,type:'string'},\r\n        { field: 'Urdu',headerName:'Urdu', width: 100 },\r\n        { field: 'Local_Grouping',headerName:'Group', width: 100 ,type:'string'},\r\n        { field: 'Taste_Class',headerName:'Taste', width: 90 },\r\n        { field: 'Thorns' ,headerName:'Thorns', width: 100},\r\n        { field: 'Meat_Whiteness',headerName:'Meat Color', width: 100 },\r\n        { field: 'Net_Wt_Fillets_Min' ,headerName:'Fillets(Net Wt/kg)', width: 105},\r\n        { field: 'Net_Wt_Steaks_Min',headerName:'Steaks(Net Wt/kg)', width: 110 },\r\n        { field: 'Price', width: 100 },\r\n        \r\n       \r\n        { field: 'Meat_Whiteness',headerName:'Color(meat)', width: 105 },\r\n        { field: 'Salt_Water' ,headerName:'Water', width: 90},\r\n        \r\n        { field: 'Size',headerName:'Size', width: 90 },\r\n        { field: 'bestfor',headerName:'Best For', width: 120 },\r\n      ];\r\n      \r\n      const rows = this.state.data\r\n      ;\r\n      \r\n      \r\n       return (\r\n       \r\n            <Row><Col>\r\n             <div style={{height:800}}>\r\n            <DataGrid rows={rows} \r\n            \r\n            columns={columns} rowHeight={25} />\r\n            </div>\r\n            </Col>\r\n            </Row>\r\n         \r\n       );\r\n    }\r\n }\r\n\r\n const mapStateToProps = state => {\r\n  return {\r\n    product: state.product,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n   \r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Cart);"]},"metadata":{},"sourceType":"module"}